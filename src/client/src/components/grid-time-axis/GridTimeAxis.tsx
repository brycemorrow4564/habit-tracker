import * as React from "react"; 
import _ from "lodash"; 
import moment from "moment"; 
import { Row, Col } from "antd"; 
import { styled } from "../../theme"; 
import { colors } from "../../utils/color";
import { useRootContext } from "../../contexts/context";
import Box, { BoxProps } from "../Box";  
import GridRowLayout from "../GridRowLayout";
import { ReducerState } from "../../reducers/reducer"; 

import GridTimeAxisItem from "./GridTimeAxisItem";
import GridAxisNotch from "./GridAxisNotch"; 
import { ShiftButtonIconLeft, ShiftButtonIconRight } from "./ShiftButtons" 

import "../../css/GridTimeAxis.css"; 

// export interface TextBoxProps {
//   boxProps: BoxProps, 
//   textStyle: React.CSSProperties, 
//   text: string, 
//   className?: string
// }; 

// const TextBox: React.FC<TextBoxProps> = ({ boxProps, className, text, textStyle }) => {
//   const textProps = className ? { className } : {}; 
//   return (
//     <Box { ...boxProps }>
//       <p { ...textProps} style={textStyle}>{text}</p>
//     </Box>
//   )
// }; 

export interface GridTimeAxisProps {

}; 

const AxisSiderContainer = styled.div`
  display: flex; 
  flex-direction: column; 
  justify-content: space-between; 
  height: 100%; 
  padding-top: 1em; 
`; 

const HabitListHeaderCol = styled(Col)`
  border-top: ${props => props.theme.table_axes_border}; 
  border-left: ${props => props.theme.table_axes_border}; 
  border-right: ${props => props.theme.table_axes_border}; 
  background: ${props => props.theme.table_axes_background}; 
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
`; 

const HabitListHeaderLabel = styled.p`
  font-size: 20px;
  font-weight: 600; 
  margin: .3em .5em .3em .5em; 
  color: ${props => props.theme.habitlist_title_color}
`; 

const HabitListFiller = styled.div`
  width: 100%; 
  border-top: ${props => props.theme.table_axes_border}; 
  background: ${props => props.theme.table_axes_background}; 
`; 

const GridTimeAxis: React.FC<GridTimeAxisProps> = (props) => {

  const { state, dispatch } = useRootContext(); 
  const { weeksWindower, today, timeAxisMiddleSpacingPercent }: ReducerState = state; 
  const axisRef = React.useRef<any>(null); 
  const axisItemRefs = React.useRef<any[]>([]); 

  const window: Array<moment.Moment> = weeksWindower.window();
  const wlen: number = window.length; 
  const windowLeft = window.slice(0, wlen/2); 
  const windowRight = window.slice(wlen/2, wlen); 

  // TODO: logic of this effect needs to occur on resize as well
  React.useEffect(() => {
    if (axisItemRefs && axisItemRefs.current && axisRef && axisRef.current) {
      // Compute the x positions of the axis items relative to the parent container 
      // the layout is generated by flexbox so we need to use the computed style to derive this
      let containerDims = (axisRef.current as HTMLElement).getBoundingClientRect(); 
      let xs = axisItemRefs.current.map((el: HTMLElement) => {
        let { left, width }: DOMRect = el.getBoundingClientRect(); 
        return (left + width / 2) - containerDims.left; 
      }); 
      dispatch(['update axis item dimensions', xs]);
    }
  }, [axisItemRefs, axisRef]); 

  const createAxisItem = (iOffset: number, d: moment.Moment, i: number) => {
    return (
      <Col key={d.format()} className={'grid-time-label-box'}>
        <div style={{ height: '100%', width: '100%' }} ref={ref => axisItemRefs.current[i+iOffset] = ref}>
          <GridTimeAxisItem date={d} isCurDay={today.isSame(d, 'days')}/>
        </div>
      </Col>
    );
  }; 

  const leftBoxProps: BoxProps = { horizontal: 'end', vertical: 'middle', span: colors.left_span }; 
  const centerBoxProps: BoxProps = { horizontal: 'center', vertical: 'middle', span: 24 }; 
  const rightBoxProps: BoxProps = { horizontal: 'start', vertical: 'middle', span: colors.right_span }; 

  return (
    <div>

      <GridRowLayout
      left={
        <Box { ...leftBoxProps } rowStyle={{ height: '100%' }} colStyle={{ height: '100%' }}>
          <AxisSiderContainer>
            {/* Left shift button */}
            <Box horizontal="end" vertical="middle" span={6}>
              <Box horizontal="space-around" vertical="middle">
                <ShiftButtonIconLeft onClick={() => dispatch(['shift window', false])}/>
              </Box>
            </Box>
            {/* Habit list header */}
            <Box horizontal="start" vertical="bottom" span={24}>
              <Row justify="space-between" align="bottom">
                <HabitListHeaderCol>
                  <div>
                    <HabitListHeaderLabel>Habits</HabitListHeaderLabel>
                  </div>
                </HabitListHeaderCol>
                <Col flex={1}>
                  <HabitListFiller/>
                </Col>
              </Row>
            </Box>
          </AxisSiderContainer>
        </Box>
      }
      center={
        <Box { ...centerBoxProps }>
          <div className="axis-row" style={Object.assign({ 
            background: colors.timeaxis_background, 
            borderTop: colors.timeaxis_border, 
            borderLeft: colors.timeaxis_border, 
            borderRight: colors.timeaxis_border
          }, colors.axisRowPadding)}>

            <div ref={axisRef} style={{ display: 'flex', justifyContent: 'space-between' }}>

              <div style={{ flex: `0 0 ${(.5-timeAxisMiddleSpacingPercent/2)*100}%` }}>
                <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'middle', flex: '0 0 100%' }}>
                  {windowLeft.map(_.partial(createAxisItem, 0))}
                </div>
              </div>

              <div style={{ flex: `0 0 ${(.5-timeAxisMiddleSpacingPercent/2)*100}%` }}>
                <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'middle', flex: '0 0 100%' }}>
                  {windowRight.map(_.partial(createAxisItem, 7))}
                </div>
              </div>

            </div>
          </div>
        </Box>
      }
      right={
        <Box { ...rightBoxProps } rowStyle={{ height: '100%' }} colStyle={{ height: '100%' }}>
          <AxisSiderContainer>
            {/* Right shift button */} 
            <Box horizontal="start" vertical="middle" span={6}>
              <Box horizontal="space-around" vertical="middle">
                <ShiftButtonIconRight onClick={() => dispatch(['shift window', false])}/>
              </Box>
            </Box>
          </AxisSiderContainer>
        </Box>
      }/>

      <GridAxisNotch leftBoxProps={leftBoxProps} centerBoxProps={centerBoxProps}/>

    </div>
  );
}



export default GridTimeAxis;
