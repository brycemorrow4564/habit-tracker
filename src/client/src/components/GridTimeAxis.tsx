import * as React from "react"; 
import { LeftCircleFilled, RightCircleFilled } from "@ant-design/icons";  
import { scaleLinear } from "d3-scale";
import _ from "lodash"; 
import moment from "moment"; 
import { Row, Col, Tabs } from "antd"; 
import styled from "styled-components"; 
import { cssLinearGradientPropertyGenerator } from "../utils/util"; 
import { colors } from "../utils/color";
import { useRootContext } from "../contexts/context";
import Box, { BoxProps } from "./Box";  
import GridRowLayout from "./GridRowLayout";
import { ReducerState } from "../reducers/reducer"; 
import "../css/GridTimeAxis.css"; 

export interface TextBoxProps {
  boxProps: BoxProps, 
  textStyle: React.CSSProperties, 
  text: string, 
  className?: string
}; 

export interface GridTimeAxisItemProps {
  date: moment.Moment, 
  isCurDay: boolean 
}; 

export interface GridTimeAxisProps {

}; 

const TextBox: React.FC<TextBoxProps> = ({ boxProps, className, text, textStyle }) => {
  const textProps = className ? { className } : {}; 
  return (
    <Box { ...boxProps }>
      <p { ...textProps} style={textStyle}>{text}</p>
    </Box>
  )
}; 

const GridTimeAxisItem: React.FC<GridTimeAxisItemProps> = (props) => {

  const { date, isCurDay } = props; 

  let itemColors = {
    'normal': {
      'backgroundColor': '#333', 
      'border': colors.timeaxis_border, 
      'low': colors.timeaxis_text_normal_low_contrast, 
      'high': colors.timeaxis_text_normal_high_contrast
    }, 
    'current': {
      'backgroundColor': '#46ab16', 
      'border': colors.timeaxis_border, 
      'low': colors.timeaxis_text_current_low_contrast, 
      'high': colors.timeaxis_text_current_high_contrast
    }
  }
  let styleDef = isCurDay ? itemColors.current : itemColors.normal; 
  let lowContrastStyle = { color: styleDef.low };
  let highContrastStyle = { color: styleDef.high };
  let curDayBackgroundColor = styleDef.backgroundColor;
  let curDayBorder = styleDef.border; 
  let boxProps: BoxProps = { horizontal: 'center', vertical: 'middle' }; 
  return (
    <div style={{ background: curDayBackgroundColor, border: curDayBorder }}>
      {/* Name of month */}
      <TextBox boxProps={boxProps} textStyle={lowContrastStyle} className="grid-time-axis-label grid-time-axis-month" text={date.format('MMM')}/>
      <TextBox boxProps={boxProps} textStyle={highContrastStyle} className="grid-time-axis-label grid-time-axis-day" text={date.format('D')}/>
      <TextBox boxProps={boxProps} textStyle={lowContrastStyle} className="grid-time-axis-label grid-time-axis-day-of-week" text={date.format('ddd').toUpperCase()}/>
    </div>
  );

}

const StyledGridTimeAxisItem = styled(GridTimeAxisItem)<{ isCurDay: boolean }>`


`

const GridTimeAxis: React.FC<GridTimeAxisProps> = (props) => {

  const { state, dispatch } = useRootContext(); 
  const { weeksWindower, today, timeAxisMiddleSpacingPercent }: ReducerState = state; 
  const axisRef = React.useRef<any>(null); 
  const axisItemRefs = React.useRef<any[]>([]); 

  const window: Array<moment.Moment> = weeksWindower.window();
  const wlen: number = window.length; 
  const windowLeft = window.slice(0, wlen/2); 
  const windowRight = window.slice(wlen/2, wlen); 

  // TODO: logic of this effect needs to occur on resize as well
  React.useEffect(() => {
    if (axisItemRefs && axisItemRefs.current && axisRef && axisRef.current) {
      // Compute the x positions of the axis items relative to the parent container 
      // the layout is generated by flexbox so we need to use the computed style to derive this
      let containerDims = (axisRef.current as HTMLElement).getBoundingClientRect(); 
      let xs = axisItemRefs.current.map((el: HTMLElement) => {
        let { left, width }: DOMRect = el.getBoundingClientRect(); 
        return (left + width / 2) - containerDims.left; 
      }); 
      dispatch(['update axis item dimensions', xs]);
    }
  }, [axisItemRefs, axisRef]); 

  const createAxisItem = (iOffset: number, d: moment.Moment, i: number) => {
    return (
      <Col key={d.format()} className={'grid-time-label-box'}>
        <div style={{ height: '100%', width: '100%' }} ref={ref => axisItemRefs.current[i+iOffset] = ref}>
          <GridTimeAxisItem date={d} isCurDay={today.isSame(d, 'days')}/>
        </div>
      </Col>
    );
  }; 

  const notchStyle = { height: 10, background: colors.timeaxis_background }; 
  const useBottomBorderLeft: boolean = false; 
  const useBottomBorderRight: boolean = true; 
  let notchStyleLeft = Object.assign(_.clone(notchStyle), { 
    borderLeft: colors.timeaxis_border, 
    // borderRight: colors.timeaxis_border, 
  });  
  let notchStyleRight = Object.assign(_.clone(notchStyle), { 
    borderRight: colors.timeaxis_border, 
    // borderLeft: colors.timeaxis_border 
  }); 
  if (useBottomBorderLeft) {
    notchStyleLeft = Object.assign(notchStyleLeft, { borderBottom: colors.timeaxis_border }); 
  }
  if (useBottomBorderRight) {
    notchStyleRight = Object.assign(notchStyleRight, { borderBottom: colors.timeaxis_border }); 
  }

  const shiftButtonStyle = { color: colors.shift_button_color }; 
  const leftBoxProps: BoxProps = { horizontal: 'end', vertical: 'middle', span: colors.left_span }; 
  const centerBoxProps: BoxProps = { horizontal: 'center', vertical: 'middle', span: 24 }; 
  const rightBoxProps: BoxProps = { horizontal: 'start', vertical: 'middle', span: colors.right_span }; 

  return (
    <div>

      <GridRowLayout
      left={
        <Box { ...leftBoxProps } rowStyle={{ height: '100%' }} colStyle={{ height: '100%' }}>
          <div style={{ display: 'flex', flexDirection: "column", justifyContent: 'space-between', height: '100%', paddingTop: '1em' }}>
            {/* Left shift button */}
            <Box horizontal="end" vertical="middle" span={6}>
              <Box horizontal="space-around" vertical="middle">
                <LeftCircleFilled 
                style={shiftButtonStyle}
                className="shift-control shift-control-left" 
                translate={0} 
                onClick={() => dispatch(['shift window', false])}/>
              </Box>
            </Box>
            {/* Habit list header */}
            <Box horizontal="start" vertical="bottom" span={24}>
              <Row justify="space-between" align="bottom">
                <Col className="habit-list-header" style={{ borderTop: colors.timeaxis_border, borderRight: colors.timeaxis_border, borderLeft: colors.timeaxis_border, borderBottom: colors.habitlist_header_border_bottom, background: colors.timeaxis_background }}>
                  <div>
                    <p className="habit-list-header-label" style={{ color: colors.habitlist_title_color }}>Habits</p>
                  </div>
                </Col>
                <Col flex={1}>
                  <div style={{ width: '100%', borderTop: colors.timeaxis_border, background: colors.timeaxis_background }}></div>
                </Col>
              </Row>
            </Box>
          </div>
        </Box>
      }
      center={
        <Box { ...centerBoxProps }>
          <div className="axis-row" style={Object.assign({ 
            background: colors.timeaxis_background, 
            borderTop: colors.timeaxis_border, 
            borderLeft: colors.timeaxis_border, 
            borderRight: colors.timeaxis_border
          }, colors.axisRowPadding)}>

            <div ref={axisRef} style={{ display: 'flex', justifyContent: 'space-between' }}>

              <div style={{ flex: `0 0 ${(.5-timeAxisMiddleSpacingPercent/2)*100}%` }}>
                <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'middle', flex: '0 0 100%' }}>
                  {windowLeft.map(_.partial(createAxisItem, 0))}
                </div>
              </div>

              <div style={{ flex: `0 0 ${(.5-timeAxisMiddleSpacingPercent/2)*100}%` }}>
                <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'middle', flex: '0 0 100%' }}>
                  {windowRight.map(_.partial(createAxisItem, 7))}
                </div>
              </div>

            </div>
          </div>
        </Box>
      }
      right={
        <Box { ...rightBoxProps } rowStyle={{ height: '100%' }} colStyle={{ height: '100%' }}>
          <div style={{ display: 'flex', flexDirection: "column", justifyContent: 'space-between', height: '100%', paddingTop: '1em' }}>
            {/* Right shift button */} 
            <Box horizontal="start" vertical="middle" span={6}>
              <Box horizontal="space-around" vertical="middle">
                <RightCircleFilled 
                style={shiftButtonStyle}
                className="shift-control shift-control-left" 
                translate={0} 
                onClick={() => dispatch(['shift window', true])}/>
              </Box>
            </Box>
            <Box horizontal="space-around" vertical="bottom" span={6}>
              <p></p> 
            </Box>
          </div>
        </Box>
      }/>

      <GridRowLayout
      left={<Box { ...leftBoxProps } colStyle={notchStyleLeft}/>}
      center={<Box { ...centerBoxProps } colStyle={notchStyleRight}/>}
      right={null}/>

    </div>
  );
}



export default GridTimeAxis;
