import * as React from "react"; 
import { PlusCircleOutlined, EditOutlined } from "@ant-design/icons";  
import { scaleLinear } from "d3-scale";
import useDimensions from "react-use-dimensions"; 
import _ from "lodash"; 
import { Row, Col } from "antd"; 
import Box from "./Box"; 
import { colors } from "../utils/color";
import { ReducerState } from "../reducers/reducer";
import { useRootContext } from "../contexts/context"; 
import HabitCard from "./HabitCard"; 
import HabitCreatorCard from "./HabitCreatorCard"; 

import "../css/HabitList.css"; 

/*
The time axis for the habit table viewer 
*/

export interface HabitListProps {

}

const HabitList: React.FC<HabitListProps> = (props) => {

  // const [addingNewHabit, setAddingNewHabit] = React.useState(false); 
  const listRef = React.useRef<any>(null); 
  const itemRefs = React.useRef<{ [key: string]: any }>({}); 
  const { state, dispatch } = useRootContext(); 
  const { habitTable }: ReducerState = state; 

  // TODO: logic of this effect needs to occur on resize as well
  React.useEffect(() => {
    if (listRef && listRef.current && itemRefs && itemRefs.current) {
      // Compute the y positions of the list items relative to the parent container 
      // the layout is generated by flexbox so we need to use the computed style to derive this
      let names: Array<string> = habitTable.getNames();
      let heights = names.map((name: string) => {
        let el: HTMLElement = itemRefs.current[name]; 
        let { height }: DOMRect = el.getBoundingClientRect(); 
        return height; 
      }); 
      dispatch(['update list item dimensions', heights]);      
    }
  }, [listRef, itemRefs, habitTable]); 

  const habitCardFromName = (habitName: string) => <HabitCard key={habitName} habitName={habitName} cardRefs={itemRefs} />; 

  const colStyle = { borderLeft: colors.timeaxis_border, borderRight: colors.timeaxis_border, borderBottom: colors.timeaxis_border, background: colors.timeaxis_background, height: '100%' }; 

  return (
    <Box span={colors.left_span} horizontal="end" vertical="middle" rowStyle={{ height: '100%' }} colStyle={colStyle}>
        <div ref={listRef}>

        {/* List items for each habit */}
        {habitTable.getNames().map(habitCardFromName)}

        {/* Small form for adding new habits */}
        <HabitCreatorCard/>

        </div>
    </Box>
    // <Row justify="end" align="middle" style={{ height: '100%' }}>
    //   <Col span={12} style=>
        
    //   </Col>
    // </Row>
  );
}

export default HabitList;
